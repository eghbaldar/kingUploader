@{
    ViewData["Title"] = "Home Page";
}
<style>
    body {
        padding: 20px;
    }

    .progress {
        width: 100%;
        height: 100px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    #dynamic {
        width: 100%;
        height: 100px;
        font-size: 30px;
        font-weight: bold;
    }

    .progress-bar.active, .progress.active .progress-bar {
        -webkit-animation: progress-bar-stripes 2s linear infinite;
        -o-animation: progress-bar-stripes 2s linear infinite;
        animation: progress-bar-stripes 2s linear infinite;
    }

    .progress-bar-success {
        background-color: orange !important;
    }

    .progress-bar-success-gray {
        background-color: gray !important;
    }

    #btncontinue_or_pause_client {
        visibility: hidden;
    }

    #btnMerge {
        visibility: hidden;
    }

    #myBar {
        height: 24px;
        width: 0%
    }

    .w3BoxSubProgress {
        visibility: hidden;
        /*border: 1px solid #ccc !important*/ /*(if you want)*/
    }

    #idMainBoxbar {
        position: absolute;
        font-size: 30px;
        color: #fff;
        font-weight: bold;
        text-shadow: 0px 2px 4px rgba(0,0,0,0.38);
    }

    #idBoxbar {
        position: absolute;
        padding-bottom: 1px !important;
        color: #000 !important;
        width: 100%;
    }

    .w3BoxSubProgress-grey {
        background-color: orange !important;
        height: 24px;
        width: 0%;
    }
</style>

<div class="progress">
    <div id="idMainBoxbar"></div>
    <div id="dynamic" class="progress-bar progress-bar-success progress-bar-striped active" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%">
        <span id="current-progress"></span>
    </div>
</div>
@*each byte*@
<div class="w3BoxSubProgress" id="BoxSubProgress">
    <div id="idBoxbar"></div>
    <div class="w3BoxSubProgress-grey" id="myBar"></div>
</div>

<hr />

<input type="file" id="fileupload1">
<button type="button" id="btnMerge" onclick="merging()">Merge</button>
<button type="button" id="btncontinue_or_pause_client" onclick="pause()">Pause</button>


@section Scripts{
    <script>

        const eachCHUNK = 100; // (KB) // the volume of each chunk for uploading // NOTE: the last part may less than 100kb
        var start = 0; // first Byte of your file // this varibale will be increase by [chunkSize]
        var chunkSize; // (BYTE) // keep the volume of each chunk in BYTE (eachCHUNK * 1024)
        var file; // Your file
        var continue_or_pause_client; // TRUE: Resuming | False : was Paused
        var subProgressValue = 0; // subProgress Global Variable
        var allowSubProgressValue; // subProgress Global Variable
        var increased_value; // main Progress Global Variable
        var current_progress = 0;// main Progress Global Variable
        const fileInput = document.getElementById('fileupload1');
        fileInput.addEventListener('change', handleFileUpload);

        function handleFileUpload(event) {

            continue_or_pause_client = true; // set default value
            file = event.target.files[0]; // get first file from the [input file]
            chunkSize = 1024 * eachCHUNK; // size of each chunk (1MB)
            CalcIncreaseValue(file.size); // [increased value] to progress of progressbar
            var chunk = file.slice(start, start + chunkSize);
            allowSubProgressValue = true; // SubProgressbar is ready now!
            actionSubProgressbar(); // SubProgressbar is fired!
            uploadChunk(chunk, chunkSize, file.name); // the main function is fired!
            actionProgressbar(true); // the main Progressbar is started!
            $("#btncontinue_or_pause_client").css('visibility', 'visible');
            $("#BoxSubProgress").css('visibility', 'visible');

        }

        // main function
        var timestamp = new Date().getTime();

        function uploadChunk(chunk, chunkSize, filename) {


            if (continue_or_pause_client) {
                var postData = new FormData();
                postData.append("file", chunk);
                postData.append("ChunkSize", chunkSize);
                postData.append("Filename", filename);

                // calc time and speed of upload
                var startTime = (new Date()).getTime();
                var endTime = startTime;
                // end

                $.ajax({
                    contentType: false,
                    processData: false,
                    type: 'POST',
                    data: postData,
                    url: 'Home/Upload',
                    success: function (data) {
                        if (data.success) {

                            //////////// Time & Speed of Uploading
                            endTime = (new Date()).getTime();
                            var time = (endTime - startTime) / 1000;
                            var sizeInBits = chunkSize * 8;
                            var speed = ((sizeInBits / time) / (1024 * 1024)).toFixed(2);
                            $("#idBoxbar").text("Time: " + time + " [MS], Speed: " + speed + " [MPS]");
                            ///////////

                            start += chunkSize;
                            var chunk2 = file.slice(start, start + chunkSize);
                            if (chunk2.size >= chunkSize) {
                                subProgressValue = 0;
                                actionProgressbar(true);
                            }
                            else
                                actionProgressbar(false); // if the last part is less than [eachCHUNK]KB
                            if (start < file.size)
                                uploadChunk(chunk2, chunkSize, file.name);
                        }
                    },
                    error: function (request, status, error) {
                        //alert('request:' + request.responseText + ';err:' + error);
                    }
                });
            }

        }

        // pausing
        function pause() {
            continue_or_pause_client = !continue_or_pause_client;
            if (!continue_or_pause_client) {
                $("#dynamic").removeClass("progress-bar-success");
                $("#dynamic").addClass("progress-bar-success-gray");
                $("#btncontinue_or_pause_client").html('Resume');
            }
            else {
                $("#btncontinue_or_pause_client").html('Pause');
                $("#dynamic").removeClass("progress-bar-success-gray");
                $("#dynamic").addClass("progress-bar-success");
                var chunk = file.slice(start, start + chunkSize);

                uploadChunk(chunk, chunkSize, file.name);
            }
        }

        // Merging
        function merging() {
            $.ajax({
                contentType: false,
                processData: false,
                type: 'POST',
                url: 'Home/Merge',
                success: function () {
                    //alert('1');
                },
                error: function (request, status, error) {
                    //alert('request:' + request.responseText + ';err:' + error);
                }
            });
        }

        // main progressbar
        function actionProgressbar(lastPartState) {
            if (lastPartState) {
                current_progress += increased_value;
                var showedValue = parseFloat(current_progress.toFixed(2))
                $("#dynamic")
                    .css("width", current_progress + "%")
                    .attr("aria-valuenow", current_progress);
                //.text(showedValue + "%");
                $("#idMainBoxbar").text(showedValue + "%");
            }
            else {
                $("#dynamic")
                    .css("width", 100 + "%")
                    .attr("aria-valuenow", 100);
                //.text(100 + "%");
                $("#idMainBoxbar").text("100%");
                allowSubProgressValue = false;
                $("#btnMerge").css('visibility', 'visible');
                $("#btncontinue_or_pause_client").css('visibility', 'hidden'); // Hide [pause-continue botton] after being completed the upload process (100%)
                $("#BoxSubProgress").css('visibility', 'hidden');
            }
        }

        function CalcIncreaseValue(fileSize) {
            //fileSize is BYTE
            var kb = fileSize / 1024;
            var eachKb = Math.ceil(kb / eachCHUNK);
            var eachUnit = 100 / eachKb;
            increased_value = eachUnit;
        }

        // main Sub Progressbar
        function actionSubProgressbar() {
            var elem = document.getElementById("myBar");
            var id = setInterval(frame, 10);
            function frame() {
                if (allowSubProgressValue) {
                    if (subProgressValue >= 100) {
                        clearInterval(id);
                        subProgressValue = 0;
                        actionSubProgressbar();
                    } else {
                        subProgressValue++;
                        elem.style.width = subProgressValue + '%';
                    }
                } else {
                    elem.style.width = 0 + '%';
                    elem.innerHTML = '';
                }
            }
        }

        // load page and resume
        $(document).ready(function () {

            // check if the last film is uploaded or not
            // the filename must be getting with a parameter such as querystring
            // but here we assume the left file is "test.jpg"

            //var postData = { filename: 'test.jpg' };
            //$.ajax({
            //    contentType: 'application/x-www-form-urlencoded',
            //    dataType: 'json',
            //    type: 'POST',
            //    data: postData,
            //    url: 'checkResume',
            //    success: function (data) {
            //        if(data.success){
            //            alert(data.message);
            //        }
            //    },
            //    error: function (req, res, err) {
            //        alert('req' + req.responseText + ' err:' + err);
            //    }
            //});

        });

    </script>

}

